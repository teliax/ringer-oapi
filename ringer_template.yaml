openapi: 3.0.3
info:
  title: Ringer Product API
  description: |
    Comprehensive description of the Ringer API product.
    
    ## Authentication
    This API uses IP whitelist authentication. Your server's IP address must be registered with
    Ringer before making API calls. Contact support@ringer.tel to register your IP address.
    
    ## Overview
    [Include detailed information about what this API does and how it can be used]
  version: 1.0.0
  license:
    name: MIT License
    url: https://github.com/teliax/ringer-oapi/blob/main/LICENSE
  contact:
    name: Ringer API Support
    url: https://docs.ringer.tel/support
    email: support@ringer.tel

# Multiple server environments
servers:
  - url: https://api.ringer.tel/v1
    description: Production server
  - url: https://api.staging.ringer.tel/v1
    description: Staging server

# Global security definition for IP whitelist
components:
  securitySchemes:
    ipWhitelist:
      type: apiKey
      name: X-Forwarded-For
      in: header
      description: |
        IP Whitelist Authentication
        
        This API uses IP whitelist authentication. Your server's IP address must be registered with
        Ringer before making API calls. Contact support@ringer.tel to register your IP address.

# Apply IP whitelist security globally
security:
  - ipWhitelist: 

# Tags for organizing endpoints in the documentation
tags:
  - name: Resource Management
    description: Endpoints for managing resources
  - name: Configuration
    description: Configuration-related endpoints
  - name: Reporting
    description: Reporting and analytics endpoints

paths:
  # Example endpoint with path parameter
  /resource/{resourceId}:
    get:
      tags:
        - Resource Management
      summary: Retrieve resource by ID
      description: |
        Detailed explanation of the endpoint.
        This endpoint performs a lookup for a specified ID.
      operationId: getResource
      parameters:
        - name: resourceId
          in: path
          description: Unique identifier for the resource
          required: true
          schema:
            type: string
            example: "resource123"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceResponse'
              example:
                id: "resource123"
                name: "Example Resource"
                status: "active"
        '400':
          description: Bad request - invalid format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Endpoint with query parameters 
  /resource/search:
    get:
      tags:
        - Resource Management
      summary: Search for resources
      description: Search resources using various query parameters
      operationId: searchResources
      parameters:
        - name: query
          in: query
          description: Search term
          required: true
          schema:
            type: string
            example: "example"
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            default: 10
            example: 25
        - name: offset
          in: query
          description: Number of results to skip
          required: false
          schema:
            type: integer
            default: 0
            example: 0
      responses:
        '200':
          description: Successful search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ResourceSummary'
                  total:
                    type: integer
                    description: Total number of matching resources
                    example: 42
              example:
                results:
                  - id: "resource123"
                    name: "Example Resource"
                  - id: "resource456"
                    name: "Another Resource"
                total: 2
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Endpoint with POST request body
  /resource/create:
    post:
      tags:
        - Resource Management
      summary: Create new resource
      description: Create a new resource with the provided information
      operationId: createResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceCreate'
            example:
              name: "New Resource"
              description: "Description of the new resource"
              type: "standard"
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Plain text response example
  /status:
    get:
      tags:
        - Configuration
      summary: Service status
      description: Returns the current service status
      operationId: getStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Current service status
                    example: "operational"
                  version:
                    type: string
                    description: Service version
                    example: "1.0.5"
                  uptime:
                    type: integer
                    description: Uptime in seconds
                    example: 3600

components:
  # Reusable schemas
  schemas:
    ResourceSummary:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "resource123"
        name:
          type: string
          description: Resource name
          example: "Example Resource"
      required:
        - id
        - name

    ResourceResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "resource123"
        name:
          type: string
          description: Resource name
          example: "Example Resource"
        status:
          type: string
          description: Current status
          enum: [active, inactive, pending]
          example: "active"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T12:00:00Z"
      required:
        - id
        - name
        - status

    ResourceCreate:
      type: object
      properties:
        name:
          type: string
          description: Resource name
          example: "New Resource"
        description:
          type: string
          description: Detailed description
          example: "Description of the new resource"
        type:
          type: string
          description: Resource type
          enum: [standard, premium, custom]
          example: "standard"
      required:
        - name
        - type

    Error:
      type: object
      properties:
        status:
          type: string
          description: Error status
          example: "error"
        error:
          type: string
          description: Error message
          example: "Invalid input parameters"
        error_code:
          type: string
          description: Error code for machine processing
          example: "INVALID_INPUT"
      required:
        - status
        - error 