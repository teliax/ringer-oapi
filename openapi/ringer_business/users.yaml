# THIS IS A PARTIAL OPENAPI FILE
# This file contains path objects intended to be referenced by main.yaml
# The following structure is added for standalone validation purposes only

openapi: 3.0.3
info:
  title: Ringer Business API - Users
  description: |
    Manage users within your Ringer Business account.
    
    Users are the people who interact with the Ringer Business system. Users have predefined roles with different permissions:
    
    - Administrators can:
      - Access billing information
      - Request payouts
      - Add or change price decks and plans
      - Manage users
    
    - Regular users can:
      - View account activity
      - View existing price decks
    
    ## Authentication
    This API supports OAuth 2.0 authentication using:
    - Password grant flow
    - Client credentials grant flow
    
    The `client_id` and `client_secret` carry many privileges, so be sure to keep them secure!
    Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, etc.
  version: 1.0.0
  license:
    name: MIT License
    url: https://github.com/teliax/ringer-oapi/blob/main/LICENSE
  contact:
    name: Ringer API Support
    url: https://docs.ringer.io/
    email: support@ringer.io

servers:
  - url: https://api.ringer.io/v1
    description: Production server
  - url: https://api.staging.ringer.io/v1
    description: Staging server

security:
  - BearerAuth: []

tags:
  - name: Users
    description: "Manage user accounts and their permissions within your Ringer Business organization."

paths:
  /users:
    get:
      tags:
        - Users
      summary: List Users
      description: Retrieve a list of all users for the account.
      operationId: list_users
      parameters:
        - name: Authorization
          in: header
          description: Authentication token used to access the API
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '401':
          description: Unauthorized request. This error will occur if the Authorization header is not provided or is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Users
      summary: Create User
      description: Create a new user for the account.
      operationId: create_user
      parameters:
        - name: Authorization
          in: header
          description: Authentication token used to access the API
          required: true
          schema:
            type: string
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserParams'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request Parameters or Validation Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized request. This error will occur if the Authorization header is not provided or is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}:
    get:
      tags:
        - Users
      summary: User Details
      description: Retrieve details for a specific user.
      operationId: get_user
      parameters:
        - name: Authorization
          in: header
          description: Authentication token used to access the API
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized request. This error will occur if the Authorization header is not provided or is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update User
      description: Update an existing user's information.
      operationId: update_user
      parameters:
        - name: Authorization
          in: header
          description: Authentication token used to access the API
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request Parameters or Validation Errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized request. This error will occur if the Authorization header is not provided or is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete User
      description: Delete a user from the account.
      operationId: delete_user
      parameters:
        - name: Authorization
          in: header
          description: Authentication token used to access the API
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized request. This error will occur if the Authorization header is not provided or is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    UserList:
      type: object
      properties:
        users:
          type: array
          description: Array of Users
          items:
            $ref: '#/components/schemas/User'
        total_items:
          type: string
          example: "350"
          description: Total number of items
          readOnly: true
        total_pages:
          type: string
          example: "7"
          description: Total number of pages
          readOnly: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/linkDescription'
    
    User:
      allOf:
        - $ref: '#/components/schemas/UserParams'
        - required:
          - id
          properties:
            id:
              type: integer
              example: 1
            links:
              type: array
              items:
                $ref: '#/components/schemas/linkDescription'
              example:
                - href: /users/1
                  rel: self
                  title: User Details
                  method: GET
                - href: /users/1
                  rel: edit
                  title: Edit User
                  method: PUT
                - href: /users/1
                  rel: delete
                  title: Delete User
                  method: DELETE
    
    UserParams:
      required:
        - email
        - first_name
        - last_name
        - role
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [administrator, user]
          example: "user"
    
    linkDescription:
      type: object
      required:
        - href
        - rel
      properties:
        href:
          type: string
          description: "URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing"
        rel:
          type: string
          description: Relation to the target resource of the link
        title:
          type: string
          description: A title for the link
        method:
          type: string
          description: HTTP method for requesting the target of the link (e.g. "GET" or "POST")
    
    Error:
      type: object
      properties:
        status:
          type: string
          description: Error status
          example: "error"
        error:
          type: string
          description: Error message
          example: "Invalid input parameters"
        error_code:
          type: string
          description: Error code for machine processing
          example: "INVALID_INPUT"
      required:
        - status
        - error
