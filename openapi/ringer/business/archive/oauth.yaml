openapi: 3.0.3
info:
  title: Ringer Business API - Authentication
  description: |
    The Ringer Business API uses OAuth 2.0 to authenticate and authorize client applications.
    This section details the endpoints for obtaining and revoking access tokens.

    **Supported Grant Types for Obtaining Access Tokens (`/auth/token`):**

    *   **Password Grant:**
        For trusted first-party applications where users directly provide their credentials.
        Requires: `grant_type="password"`, `username`, `password`, `client_id`, `client_secret`.

    *   **Client Credentials Grant:**
        For server-to-server authentication where the client is acting on its own behalf.
        Requires: `grant_type="client_credentials"`, `client_id`, `client_secret`.

    *   **Refresh Token Grant:**
        To obtain a new access token using a previously issued refresh token.
        Requires: `grant_type="refresh_token"`, `refresh_token`, `client_id`, `client_secret`.

    Access tokens are typically short-lived (e.g., 2 hours). Use the refresh token to maintain an active session without requiring users to re-authenticate frequently.

    **Important Security Note:**
    Your `client_id` and `client_secret` are confidential. Secure them appropriately and never expose them in client-side code or public repositories.
  version: 1.0.0
  license:
    name: MIT License
    url: https://github.com/teliax/ringer-oapi/blob/main/LICENSE
  contact:
    name: Ringer API Support
    url: https://docs.ringer.tel/support
    email: support@ringer.tel

servers:
  - url: https://api.ringer.tel/v1
    description: Production server
  - url: https://api.staging.ringer.tel/v1
    description: Staging server

tags:
  - name: Authentication
    description: "Endpoints for OAuth 2.0 token management: obtaining and revoking access tokens."

paths:
  /auth/token:
    post:
      tags:
        - Authentication
      summary: Obtain an OAuth 2.0 Access Token
      description: |
        Requests an access token using one of the supported OAuth 2.0 grant types.
        The specific parameters required in the request body depend on the `grant_type` used.

        - For `password` grant: include `username`, `password`, `client_id`, and `client_secret`.
        - For `client_credentials` grant: include `client_id` and `client_secret`.
        - For `refresh_token` grant: include `refresh_token`, `client_id`, and `client_secret`.

        Successful authentication returns an access token, its type, expiration time, and a refresh token (if applicable for the grant type).
      operationId: fetchAccessToken
      security: []
      requestBody:
        description: OAuth 2.0 grant parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
            examples:
              passwordGrant:
                summary: Example for Password Grant
                value:
                  grant_type: "password"
                  username: "developer@example.com"
                  password: "aVerySecurePassword123!"
                  client_id: "your_application_client_id"
                  client_secret: "your_application_client_secret"
              clientCredentialsGrant:
                summary: Example for Client Credentials Grant
                value:
                  grant_type: "client_credentials"
                  client_id: "your_m2m_client_id"
                  client_secret: "your_m2m_client_secret"
                  scope: "read:service_data"
              refreshTokenGrant:
                summary: Example for Refresh Token Grant
                value:
                  grant_type: "refresh_token"
                  refresh_token: "previously_issued_refresh_token_string"
                  client_id: "your_application_client_id"
                  client_secret: "your_application_client_secret"
      responses:
        '200':
          description: Access token issued successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOi..."
                token_type: "Bearer"
                expires_in: 7200
                refresh_token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOi..."
                scope: "read write"
        '400':
          description: |
            Bad Request.
            This can occur if the request is malformed, missing required parameters for the specified `grant_type`,
            or uses an unsupported `grant_type`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "error"
                error: "Invalid request: 'username' is required for grant_type 'password'."
                error_code: "INVALID_REQUEST_PARAMETERS"
        '401':
          description: |
            Unauthorized.
            Authentication failed. This could be due to invalid client credentials,
            an invalid or expired refresh token, or incorrect user credentials for the password grant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "error"
                error: "Client authentication failed: Invalid client_id or client_secret."
                error_code: "INVALID_CLIENT_CREDENTIALS"

  /auth/revoke:
    post:
      tags:
        - Authentication
      summary: Revoke an OAuth 2.0 Token
      description: |
        Revokes an active access token or refresh token, effectively logging the user or application out.
        The request must include the token to be revoked and client credentials for authentication of the revocation request itself.
      operationId: revokeAccessToken
      security: []
      requestBody:
        description: Parameters for token revocation.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeRequest'
            example:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOi..."
              client_id: "your_application_client_id"
              client_secret: "your_application_client_secret"
      responses:
        '204':
          description: Token successfully revoked. No content is returned.
        '400':
          description: |
            Bad Request.
            The request may be missing required parameters (like `token` or client credentials),
            or the token format might be invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "error"
                error: "Invalid request: 'token' parameter is missing."
                error_code: "INVALID_REQUEST_PARAMETERS"
        '401':
          description: |
            Unauthorized.
            Client authentication failed for the revocation request (e.g., invalid `client_id` or `client_secret`).
            This does *not* mean the token to be revoked was invalid, but that the revoking client is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "error"
                error: "Client authentication failed for revocation."
                error_code: "INVALID_CLIENT_CREDENTIALS_FOR_REVOCATION"

components:
  securitySchemes:
    oAuth2:
      type: oauth2
      description: |
        OAuth 2.0 authentication using various grant flows.
        The primary token endpoint is `/auth/token`.
        This security scheme definition primarily outlines the `clientCredentials` flow
        for use in securing other API endpoints. Refer to the `/auth/token` endpoint
        description for details on all supported grant types.
      flows:
        clientCredentials:
          tokenUrl: https://api.ringer.tel/v1/auth/token
          scopes:
            read: Grants read access to resources.
            write: Grants write access to resources.
            admin: Grants administrative access to resources.

  schemas:
    TokenRequest:
      type: object
      description: Parameters for requesting an OAuth 2.0 access token. Required fields vary by grant_type.
      properties:
        grant_type:
          type: string
          enum: [password, client_credentials, refresh_token]
          description: The OAuth 2.0 grant type.
          example: "password"
        username:
          type: string
          nullable: true
          description: User's email address (required for `password` grant).
          example: "developer@example.com"
        password:
          type: string
          format: password
          nullable: true
          description: User's password (required for `password` grant).
          example: "aVerySecurePassword123!"
        refresh_token:
          type: string
          nullable: true
          description: Refresh token (required for `refresh_token` grant).
          example: "def50200f29a807a83012f9a0904d71a..."
        client_id:
          type: string
          description: The application's client ID.
          example: "your_application_client_id"
        client_secret:
          type: string
          description: The application's client secret.
          example: "your_application_client_secret"
        scope:
          type: string
          nullable: true
          description: (Optional) A space-separated list of requested scopes. The granted scopes may differ.
          example: "read:profile write:data"
      required:
        - grant_type
        - client_id
        - client_secret
      example:
        grant_type: "client_credentials"
        client_id: "your_generic_client_id"
        client_secret: "your_generic_client_secret"
        scope: "read write"

    TokenResponse:
      type: object
      description: Response containing the access token and related information.
      properties:
        access_token:
          type: string
          description: The issued OAuth 2.0 access token.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOi..."
        token_type:
          type: string
          description: Type of the token issued (typically "Bearer").
          example: "Bearer"
        expires_in:
          type: integer
          description: The lifetime in seconds of the access token.
          example: 7200
        refresh_token:
          type: string
          nullable: true
          description: Token that can be used to obtain a new access token when the current access token expires.
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOi..."
        scope:
          type: string
          nullable: true
          description: Space-separated list of scopes that have been granted for this access token.
          example: "read write"
      required:
        - access_token
        - token_type
        - expires_in
      example:
        access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOi..."
        token_type: "Bearer"
        expires_in: 7200
        refresh_token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOi..."
        scope: "read write profile"

    RevokeRequest:
      type: object
      description: Parameters for revoking an OAuth 2.0 token.
      properties:
        token:
          type: string
          description: The access token or refresh token to be revoked.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOi..."
        client_id:
          type: string
          description: The client ID of the application making the revocation request.
          example: "your_application_client_id"
        client_secret:
          type: string
          description: The client secret of the application making the revocation request.
          example: "your_application_client_secret"
      required:
        - token
        - client_id
        - client_secret
      example:
        token: "specific_token_string_to_revoke"
        client_id: "your_application_client_id"
        client_secret: "your_application_client_secret"

    Error:
      type: object
      description: Standard error response structure.
      properties:
        status:
          type: string
          description: A general status indicator for the error.
          example: "error"
        error:
          type: string
          description: A human-readable description of the error.
          example: "The requested resource was not found."
        error_code:
          type: string
          description: A machine-parsable error code specific to this error condition.
          example: "RESOURCE_NOT_FOUND"
      required:
        - status
        - error
        - error_code
      example:
        status: "error"
        error: "Authentication failed due to invalid credentials."
        error_code: "AUTHENTICATION_FAILURE"
