openapi: 3.0.3
info:
  title: Ringer Business Common Components
  version: 1.0.0
  description: A collection of common reusable OpenAPI components for the Ringer Business API.
  contact:
    name: Ringer API Support
    url: https://docs.ringer.tel/support
    email: support@ringer.tel
  license:
    name: MIT
    url: https://github.com/teliax/ringer-oapi/blob/main/LICENSE # Adjusted to a likely correct URL
servers:
  - url: https://api.ringer.tel/v1 # Adjusted to a likely production server
    description: Production Server
tags:
  - name: CommonComponents
    description: Reusable common components like error formats and pagination.
paths: {} # Common components file typically does not define paths itself.
components:
  parameters:
    SiteId:
      name: siteId
      in: path
      description: The unique identifier of the site.
      required: true
      schema:
        type: string # Changed from integer to string uuid as per example in previous edit by model.
        format: uuid
        example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"

    Page:
      name: page
      in: query
      description: Page number for pagination.
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    PerPage:
      name: per_page
      in: query
      description: Number of items per page for pagination.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        example: 25

    SortBy:
      name: sort_by
      in: query
      description: Field to sort by.
      schema:
        type: string
        example: "created_at"

    SortOrder:
      name: sort_order
      in: query
      description: Sort order (asc or desc).
      schema:
        type: string
        enum: [asc, desc]
        default: desc
        example: "desc"

    Query:
      name: query
      in: query
      description: Search query string.
      schema:
        type: string
        example: "search term"

    Include:
      name: include
      in: query
      description: Comma-separated list of related resources to include.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
        example: ["owner", "address"]

  schemas:
    Error:
      type: object
      description: Standard error response format.
      properties:
        status:
          type: string
          example: "error"
          description: A general status indicator for the error.
        error:
          type: string
          description: A human-readable description of the error.
          example: "An unexpected error occurred."
        error_code:
          type: string
          description: A machine-parsable error code specific to this error condition.
          example: "INTERNAL_ERROR"
        details:
          type: array
          nullable: true
          description: Optional. An array containing more specific error details.
          items:
            type: object
            properties:
              field:
                type: string
                description: JSON pointer to the field that caused the error (if applicable).
                example: "/data/attributes/email"
              issue:
                type: string
                description: Specific issue with the field or operation.
                example: "Email address is not valid."
      required:
        - status
        - error
        - error_code
      example:
        status: "error"
        error: "A generic error has occurred."
        error_code: "GENERIC_ERROR"

    Link: # Renamed from LinkObject to Link, as per typical usage for a single link
      type: object
      description: Represents a HATEOAS link.
      properties:
        href:
          type: string
          format: uri-reference # uri-reference is more common for relative paths
          description: The target URI of the link.
          example: "/example/resource/123"
        rel:
          type: string
          description: The relation type of the link (e.g., self, next, prev, item).
          example: "self"
        method: # Added method as it's useful for HATEOAS
          type: string
          enum: [GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD]
          description: The HTTP method to use for the link's action.
          default: GET # Default to GET if not specified
          example: "GET"
        title: # Added title for better context
          type: string
          nullable: true
          description: A human-readable title for the link.
          example: "View Example Resource"
      required: # `href` and `rel` are usually essential for a link
        - href
        - rel
      # Removed the previous LinkObject example as it's now for a single link

    LinkObject: # This is for a collection of links, like _links
      type: object
      description: An object containing various HATEOAS links, where each key is the link relation type.
      additionalProperties: 
        $ref: '#/components/schemas/Link'
      # No 'required' field here for LinkObject
      example:
        self:
          href: "/resource/id"
          rel: "self"
          method: "GET"
        parent:
          href: "/parent_resource"
          rel: "collection" # Corrected relation type for a collection
          method: "GET"

    PaginationLinks:
      type: object
      description: HATEOAS links for paginated collections.
      properties:
        self:
          $ref: '#/components/schemas/Link'
        first:
          $ref: '#/components/schemas/Link'
        prev:
          oneOf:
            - $ref: '#/components/schemas/Link'
            - type: object      
              nullable: true
              properties: {} 
              additionalProperties: false
          description: Link to the previous page, null if this is the first page.
        next:
          oneOf:
            - $ref: '#/components/schemas/Link'
            - type: object      
              nullable: true
              properties: {}
              additionalProperties: false
          description: Link to the next page, null if this is the last page.
        last:
          $ref: '#/components/schemas/Link'
      required:
        - self
        - first
        - last
      example:
        self: { href: "/items?page=2&per_page=10", rel: "self", method: "GET" }
        first: { href: "/items?page=1&per_page=10", rel: "first", method: "GET" }
        last: { href: "/items?page=5&per_page=10", rel: "last", method: "GET" }
        next: { href: "/items?page=3&per_page=10", rel: "next", method: "GET" }
        prev: { href: "/items?page=1&per_page=10", rel: "prev", method: "GET" }

    SiteDestination:
      type: object
      description: Represents a routing destination within a site.
      properties:
        name:
          type: string
          description: Human-readable name of the destination.
          example: "Sales IVR Menu"
        code:
          type: string
          description: System code for the destination (e.g., menu:id, device:id, voicemailbox:id, ring_group:id, forward:id, extension:id, user:id).
          example: "menu:main_sales_ivr"
      required:
        - name
        - code
      example:
        name: "Support Voicemail"
        code: "voicemailbox:vm_support"

    DeviceCore:
      type: object
      description: Core properties of a device, used for creation and as part of responses.
      properties:
        name:
          type: string
          description: A user-friendly name for the device.
          example: "Sales Desk Phone 1"
        login:
          type: string
          description: SIP username for the device.
          example: "sales.phone1.site_alpha"
        active:
          type: boolean
          description: Whether the device is active.
          default: true
          example: true
        channel_limit:
          type: integer
          description: Maximum concurrent calls for this device.
          default: 2
          example: 2
        timeout:
          type: integer
          description: Ring timeout in seconds.
          default: 120
          example: 60
        caller_id_name:
          type: string
          description: Caller ID name to present for outbound calls from this device.
          nullable: true
          example: "Sales Department"
        caller_id_number:
          type: string
          description: Caller ID number (E.164) to present for outbound calls.
          nullable: true
          example: "+13035550100"
        acl:
          type: string
          description: Access Control List (IP/CIDR) for device registration.
          nullable: true
          default: "0.0.0.0/0"
          example: "70.100.10.0/24"
        fail_over_destination_code:
          type: string
          description: System code for the destination if the device is unreachable or times out.
          nullable: true
          example: "voicemailbox:sales_vm_unavailable"
      required:
        - name
        - login
      example:
        name: "Main Conference Phone"
        login: "conf.phone.main"
        active: true
        channel_limit: 4
        timeout: 180
        caller_id_name: "Conference Room"
        caller_id_number: "+13035550100"
        acl: "192.168.0.0/16"
        fail_over_destination_code: "voicemailbox:general_conf_vm"

  responses:
    UnauthorizedError:
      description: Unauthorized - Authentication token is missing, invalid, or does not have permissions for this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "Authentication required."
            error_code: "UNAUTHORIZED"
    ForbiddenError:
      description: Forbidden - The authenticated user does not have the necessary permissions to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "Permission denied to perform this action."
            error_code: "FORBIDDEN"
    NotFoundError:
      description: Not Found - The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested resource was not found."
            error_code: "RESOURCE_NOT_FOUND"
    SiteNotFoundError:
      description: Not Found - The specified site could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The specified site was not found."
            error_code: "SITE_NOT_FOUND"
    DeviceNotFoundError:
      description: Not Found - The requested device could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested device was not found."
            error_code: "DEVICE_NOT_FOUND"
    ConferenceRoomNotFoundError:
      description: Not Found - The requested conference room could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested conference room was not found."
            error_code: "CONFERENCE_ROOM_NOT_FOUND"
    E911NotFoundError:
      description: Not Found - The requested E911 record could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested E911 record was not found."
            error_code: "E911_NOT_FOUND"
    FaxMachineNotFoundError:
      description: Not Found - The requested fax machine could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested fax machine was not found."
            error_code: "FAX_MACHINE_NOT_FOUND"
    LocationNotFoundError:
      description: Not Found - The requested location could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested location was not found."
            error_code: "LOCATION_NOT_FOUND"
    MenuNotFoundError:
      description: Not Found - The requested menu could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested menu was not found."
            error_code: "MENU_NOT_FOUND"
    PhoneNumberNotFoundError:
      description: Not Found - The requested phone number could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested phone number was not found."
            error_code: "PHONE_NUMBER_NOT_FOUND"
    RingGroupNotFoundError:
      description: Not Found - The requested ring group could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested ring group was not found."
            error_code: "RING_GROUP_NOT_FOUND"
    ScheduleNotFoundError:
      description: Not Found - The requested schedule could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested schedule was not found."
            error_code: "SCHEDULE_NOT_FOUND"
    SeatNotFoundError:
      description: Not Found - The requested seat could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested seat was not found."
            error_code: "SEAT_NOT_FOUND"
    SipTrunkNotFoundError: # Added this based on an error in sites/schedules/index.yaml
      description: Not Found - The requested SIP trunk could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested SIP trunk was not found."
            error_code: "SIP_TRUNK_NOT_FOUND"
    VoicemailBoxNotFoundError:
      description: Not Found - The requested voicemail box could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "The requested voicemail box was not found."
            error_code: "VOICEMAIL_BOX_NOT_FOUND"
    BadRequestError:
      description: Bad Request - The request was malformed or contained invalid data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "Invalid request parameters provided."
            error_code: "INVALID_REQUEST_PARAMETERS"
    ConflictError:
      description: Conflict - The request conflicts with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: "error"
            error: "A conflict occurred with the current resource state."
            error_code: "RESOURCE_CONFLICT"
    UnprocessableEntityError: # Added for 422 errors often related to validation
      description: Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' # You might want a more detailed error schema for validation
          example:
            status: "error"
            error: "Validation failed."
            error_code: "VALIDATION_ERROR"
            details:
              - field: "/data/attributes/email"
                issue: "must be a valid email address"

  securitySchemes:
    oAuth2:
      type: oauth2
      description: |
        OAuth 2.0 Authentication
        This API uses OAuth 2.0 for authentication. To obtain an access token:
        1. Make a POST request to the `/auth/token` endpoint with your client credentials
        2. Include the access token in subsequent requests using the Authorization header:
           `Authorization: Bearer YOUR_ACCESS_TOKEN`
        Contact your account manager to obtain client credentials.
      flows:
        clientCredentials:
          tokenUrl: https://api.ringer.tel/v1/auth/token # This should be the actual token URL
          scopes:
            read: Read access to API resources
            write: Write access to API resources
            admin: Administrative access 